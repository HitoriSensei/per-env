// Generated by CodiumAI

beforeEach(() => {
  // reset all require mocks
  jest.resetModules();

  // Mock the required modules
  jest.mock("../lib/process", () => ({
    argv: ["node", "per-env"],
    cwd() {
      return "/path/to/cwd";
    },
    exit: jest.fn(),
  }));

  jest.mock("child_process", () => ({
    spawnSync: jest.fn(() => ({
      status: 0,
    })),
  }));

  jest.mock("which", () => ({
    sync: jest.fn(() => "/path/to/npm"),
  }));

  jest.mock("../lib/env", () => ({
    npm_lifecycle_event: "start",
    npm_execpath: "/path/to/npm",
  }));
});

// Tests that default environment variables are defined and used
it("should define and use default environment variables", () => {
  jest.mock("../lib/env", () => ({
    npm_lifecycle_event: "start",
  }));

  // Import the code under test
  require("../bin/per-env");

  // Assert that the full path to the npm command is obtained
  expect(require("which").sync).toHaveBeenCalledWith("npm");

  // Assert that spawnSync is called with the correct parameters
  expect(require("child_process").spawnSync).toHaveBeenCalledWith(
    "/path/to/npm",
    ["run", "start:development"],
    expect.anything()
  );
});

// Tests that process.env.npm_lifecycle_event is not defined
it("should exit with status 1 when process.env.npm_lifecycle_event is not defined", () => {
  jest.mock("../lib/env", () => ({}));

  // Import the code under test
  require("../bin/per-env");

  // Assert that the code exits with status 1
  expect(require("../lib/process").exit).toHaveBeenCalledWith(1);
});

// Tests that env.npm_execpath is undefined and npm is not found in PATH
it("should exit with status 1 when env.npm_execpath is undefined and npm is not found in PATH", () => {
  // Mock env.npm_execpath to be undefined
  jest.mock("../lib/env", () => ({
    npm_lifecycle_event: "start",
  }));

  // Mock which.sync to throw an error
  jest.mock("which", () => ({
    sync: jest.fn(() => {
      throw new Error("not found");
    }),
  }));

  // Import the code under test
  require("../bin/per-env");

  // Assert that the code exits with status 1
  expect(require("../lib/process").exit).toHaveBeenCalledWith(1);
});

it("should correctly inherit script runner", () => {
  jest.mock("../lib/env", () => ({
    npm_lifecycle_event: "start",
    npm_execpath: "/path/to/other",
  }));

  // Import the code under test
  require("../bin/per-env");

  // Assert spawnSync is called with the correct parameters
  expect(require("child_process").spawnSync).toHaveBeenCalledWith(
    "/path/to/other",
    ["run", "start:development"],
    expect.anything()
  );
});

it("should correctly pass extra arguments", () => {
  jest.mock("../lib/env", () => ({
    npm_lifecycle_event: "start",
    npm_execpath: "/path/to/other",
  }));

  jest.mock("../lib/process", () => ({
    argv: ["node", "per-env", "--", "--extra", "arguments"],
    cwd() {
      return "/path/to/cwd";
    },
    exit: jest.fn(),
  }));

  // Import the code under test
  require("../bin/per-env");

  // Assert spawnSync is called with the correct parameters
  expect(require("child_process").spawnSync).toHaveBeenCalledWith(
    "/path/to/other",
    ["run", "start:development", "--", "--extra", "arguments"],
    expect.anything()
  );
});

it("should correctly pass extra arguments when npm_execpath is undefined", () => {
  jest.mock("../lib/env", () => ({
    npm_lifecycle_event: "start",
  }));

  jest.mock("../lib/process", () => ({
    argv: ["node", "per-env", "--", "--extra", "arguments"],
    cwd() {
      return "/path/to/cwd";
    },
    exit: jest.fn(),
  }));

  jest.mock("which", () => ({
    sync: jest.fn(() => "/path/to/npm"),
  }));

  // Import the code under test
  require("../bin/per-env");

  // Assert spawnSync is called with the correct parameters
  expect(require("child_process").spawnSync).toHaveBeenCalledWith(
    "/path/to/npm",
    ["run", "start:development", "--", "--extra", "arguments"],
    expect.anything()
  );
});

it("should correctly pass env variables", () => {
  jest.mock("../lib/env", () => ({
    npm_lifecycle_event: "start",
    npm_execpath: "/path/to/other",
    NODE_ENV: "production",
    SOME_VAR: "some value",
  }));

  // Import the code under test
  require("../bin/per-env");

  // Assert spawnSync is called with the correct parameters
  expect(require("child_process").spawnSync).toHaveBeenCalledWith(
    "/path/to/other",
    ["run", "start:production"],
    expect.objectContaining({
      env: expect.objectContaining({
        NODE_ENV: "production",
        SOME_VAR: "some value",
        npm_lifecycle_event: "start",
        npm_execpath: "/path/to/other",
      }),
    })
  );
});

it("should spawn child process with stdio: inherit", () => {
  // Import the code under test
  require("../bin/per-env");

  // Assert spawnSync is called with the correct parameters
  expect(require("child_process").spawnSync).toHaveBeenCalledWith(
    "/path/to/npm",
    ["run", "start:development"],
    expect.objectContaining({
      stdio: "inherit",
    })
  );
});
